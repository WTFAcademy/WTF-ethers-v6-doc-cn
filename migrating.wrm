_section: 从 v5 版本迁移 @<migrating> @priority<-10>

这份指南旨在捕捉 v5 和 v6 版本之间的一些高阶差异，帮助那些要迁移现有应用程序或已熟悉 v5 的人快速了解新版本。

v6 最大的不同之处在于使用现代 ES6 功能，因此很多变化在使用时是感受不到的。

- [BigNumbers](migrate-bigint)
- [Contracts](migrate-contracts)
- [Importing](migrate-importing)
- [其余变化](migrate-other)

_subsection: 大整数 Big Numbers  @<migrate-bigint>

v6最大的改变之一是 //BigNumber// 类已被现代 JavaScript 环境中内置的 ES2020 BigInt 取代。

有大量的[在线文档](link-js-bigint)可以帮助您开始学习JavaScript ES2020 BigInt。请记住，就像//BigNumber//一样，ES2020 BigInt 仅能够处理整数。

[[FixedNumber]]类仍然存在，用于进行定点数学运算。

_code: 创建大整数  @lang<script>

  // 在 v5 中使用 BigNumber 
  value = BigNumber.from("1000")

  // 在 v6 中使用 BigInt（使用文字表示法）。
  // 注意后缀 n
  value = 1000n

  // 对字符串使用 BigInt 函数
  value = BigInt("1000")

_code: 大整数运算  @lang<script>

  // 在 v5 中添加两个值
  sum = value1.add(value2)

  // 在 v6 中使用 BigInt；请记住，两个值
  // 都必须是 BigInt 
  sum = value1 + value2

_code: 大整数比较  @lang<script>

  // 在 v5 中检查是否相等
  isEqual = value1.eq(value2)

  // 在 v6 中使用 BigInt 
  isEqaul = (value1 == value2)



_subsection: 合约 Contracts @<migrate-contracts>

[[Contract]] 是一个 ES6 Proxy，这意味着它可以在运行时解析方法名称。

_heading: 有歧义的方法

在 v5 中，在有歧义的方法的情况下，有必要通过规范规范化签名查找方法。在 v6 中，不需要对签名进行规范化，Typed API 提供了一种更简洁的方式来访问所需的方法。

在 v5 中，重复定义还会将警告注入控制台，因为无法在运行时检测到它们。


In v5, in the case of an ambiguous method, it was necessary to
look up a method by its canonical normalized signature. In v6
the signature does not need to be normalized and the Typed API
provides a cleaner way to access the desired method.

In v5, duplicate definitions also injected warnings into the
console, since there was no way to detect them at run-time.

_code: v5 合约 @lang<script>
  abi = [
    "function foo(address bar)",
    "function foo(uint160 bar)",
  ]
  contract = new Contract(address, abi, provider)

  // 在 v5 中，必须指定完全限定的规范化
  // 签名才能访问所需的方法。例如：
  contract["foo(address)"](addr)

  // 这些会失败，因为签名没有规范化：
  contract["foo(address )"](addr)
  contract["foo(address addr)"](addr)

  // 这会失败，因为方法不明确：
  contract.foo(addr)

_code: v6 合约 @lang<script>
  abi = [
    "function foo(address bar)",
    "function foo(uint160 bar)",
  ]
  contract = new Contract(address, abi, provider)

  // 这些都可以正常工作：
  contract["foo(address)"](addr)
  contract["foo(address )"](addr)
  contract["foo(address addr)"](addr)

  // 这仍然失败，因为没法知道哪个方法是要调用的
  contract.foo(addr)

  // 但是，Typed API 使事情变得更简单，因为它
  // 允许向合约提供类型化信息：
  contract.foo(Typed.address(addr))

_heading: 其他方法操作

在 v5 中，合约对象包含一系列备选方法，每个备选都有对应的签名和无歧义的名字，用于执行不常见的操作。

在 v6 中，每个方法直接附有它的不常见操作。

In v5, contracts contained a series of method buckets, which

_code: v5 中的其他操作  @lang<script>

  // 根据方法类型 (pure, view, constant, non-payable or payable) 选择 send 或 call
  contract.foo(addr)

  // 这将执行默认操作，但返回的是 Result 对象，而不是值
  contract.functions.foo(addr)

  // 强制使用 call
  contract.staticCall.foo(addr)

  // 估算 gas
  contract.estimateGas.foo(addr)

  // 创建一个未签名的交易对象
  contract.populateTransaction.foo(addr)

_code: v6 中的其他操作  @lang<script>

  // 与 v5 相同
  contract.foo(addr)

  // 直接执行 call，返回 Result 对象
  contract.foo.staticCallResult(addr)

  // 强制使用 call（不论是 payable 或 non-payable)
  contract.foo.staticCall(addr)

  // 强制使用 send (即使是 pure 或 view)
  contract.foo.send(addr)

  // 估算 gas
  contract.foo.estimateGas(addr)

  // 创建一个未签名的交易对象
  contract.foo.populateTransaction(addr)


_subsection: 引入  @<migrate-importing>

在 v5 中，ethers 项目被作为一大组子包的集合进行维护。

在 v6 中，所有的导入都可以在根包中获得，对于那些希望更细粒度的控制的人，``pkg.exports`` 使得子文件直接可用。

_code: v5 中的引用  @lang<script>

  // 很多包都可以从根包中获得
  import { ethers } from "ethers"

  // 但有一些包被包含在其他的包中
  import { providers } from "ethers"
  const { InfuraProvider } = providers

  // 要细粒度控制，你需要从子包中引入
  import { InfuraProvider } from "@ethersproject/providers"

_code: v6 中的引用 @lang<script>

  // 所有子包都直接可以从根包中引入
  import { ethers } from "ethers"
  import { InfuraProvider } from "ethers"

  // pkg.exports 提供细粒度控制
  import { InfuraProvider } from "ethers/providers"


_subsection: 其余变化 @<migrate-other>


_code: 默认 AbiCoder  @lang<script>
  // In v5, it is a property of AbiCoder
  coder = AbiCoder.defaultAbiCoder

  // In v6, it is a static function on AbiCoder, which uses
  // a singleton pattern; the first time it is called, the
  // AbiCoder is created and on subsequent calls that initial
  // instance is returned.
  coder = AbiCoder.defaultAbiCoder()
